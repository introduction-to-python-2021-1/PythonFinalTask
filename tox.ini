[tox]
envlist = clean,py38,coverage,check
minversion = 3.4.0
isolated_build = true
toxworkdir={env:TOX_WORK_DIR:.tox}

[testenv]
description = Run tests with coverage in {envname}
deps = -r requirements-dev.txt
setenv =
    # Use a unique data file to enable parallel runs
    # Also supports combining in [testenv:coverage]
    COVERAGE_FILE = {toxworkdir}/.coverage.{envname}
commands =
    coverage run -m pytest

[testenv:check]
description = Run pre-commit checks on all files
basepython = python3.8
deps =
    pre-commit
commands =
    python setup.py check --strict --metadata
    pre-commit run --all-files # --show-diff-on-failure
skip_install = true

[testenv:clean]
deps = coverage
commands = coverage erase
skip_install = true

[testenv:coverage]
# See related config and explanation in [coverage:*]
description = Combine coverage data and generate reports
basepython = python3.8
depends = py38
deps =
    coverage
commands =
    # Assuming failure means we've already combined .coverage.*
    coverage combine
    coverage report
    coverage {posargs:xml}
setenv =
    COVERAGE_FILE = .coverage
skip_install = true

[testenv:codecov]
description=[Only run on CI]: Upload coverage data to codecov
deps=codecov
skip_install=True
commands=codecov -X gcov --file {toxworkdir}/coverage.xml

[testenv:release]
description =
    Upload distribution to TestPyPI after building and checking.
    For PyPI, run `tox -e release pypi`.
basepython = python3.8
deps =
    wheel
    twine>=3
    keyring
commands =
    python scripts/clean_release.py
    python setup.py sdist bdist_wheel
    python -m twine check dist/*
    python -m twine upload --repository {posargs:testpypi} dist/*
skip_install = true

[coverage:run]
branch = True
command_line = -m pytest
omit =
    */setup.py
    */**/__init__.py
    */**/__main__.py
    */ap_typing.py
source = ap_rss_reader

[coverage:report]
exclude_lines =
    # a more strict default pragma
    \# pragma: no cover\b
    # repl
    def __repr__
    # allow defensive code
    ^\s*raise AssertionError\b
    ^\s*raise NotImplementedError\b
    ^\s*raise$
    ^\s*return NotImplemented\b
    # typing-related code
    -> NoReturn:
    : \.\.\.$
    ^ +\.\.\.$
    if TYPE_CHECKING:
    # non-runnable code
    if __name__ == ['"]__main__['"]:$
    if sys.version_info < .+:$

[darglint]
docstring_style = google
ignore_regex = ^__(.*)
strictness = long

[flake8]
doctests = True
show-source = True
statistics = False

# Plugins:
max-complexity = 6
max-line-length = 79
# Plugin: flake8-typing-imports
min_python_version = 3.8

ignore =
    W503,  # Line break occurred before a binary operator

# Excluding some directories:
exclude =
    *.egg,
    .eggs,
    .git,
    .tox,
    .venv,
    __pycache__,
    build,
    dist,
    doc,

[isort]
known_first_party = ap_rss_reader,tests
src_paths = scripts,src,tests
# google profile
# https://timothycrosley.github.io/isort/docs/configuration/profiles/
force_single_line = True
force_sort_within_sections = True
group_by_package = True
lexicographical = True
order_by_type = False
single_line_exclusions = ('typing', )

# https://simpleisbetterthancomplex.com/packages/2016/10/08/isort.html
## change it for the name of your project
sections = FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,LOCALFOLDER

[pydocstyle]
convention = google
match_dir = (scripts|src|tests)
add_ignore =
    D105,  # Missing docstring in magic method

[pytest]
minversion = 6.0
python_files = test_*.py
python_functions = test_*
testpaths = tests

# Directories that are not visited by pytest collector:
norecursedirs = *.egg .* .venv __pycache__ build dist docs node_modules src

# Uncomment this if you want to see the output of the program during the tests
# log_cli = True

# Extra options:
addopts =
  --strict-markers
  --tb=short
  --cov=ap_rss_reader
  --doctest-modules
  --cov-report=xml
